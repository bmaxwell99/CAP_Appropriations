#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace(Current.Awards.FY.2018, Current.Awards.FY.2018 == '—', 0)) %>%
mutate(dollar_2017 = replace(Total.Awarded.FY.2017, Total.Awarded.FY.2017 == '—', 0)) %>%
mutate(dollar_2016 = replace(Total.Awarded.FY.2016, Total.Awarded.FY.2016 == '—', 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D")))
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace(Current.Awards.FY.2018, Current.Awards.FY.2018 == '—', 0)) %>%
mutate(dollar_2017 = replace(Total.Awarded.FY.2017, Total.Awarded.FY.2017 == '—', 0)) %>%
mutate(dollar_2016 = replace(Total.Awarded.FY.2016, Total.Awarded.FY.2016 == '—', 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace(dollar_2018, dollar_2018 == '—', 0)) %>%
mutate(dollar_2017 = replace(Total.Awarded.FY.2017, Total.Awarded.FY.2017 == '—', 0)) %>%
mutate(dollar_2016 = replace(Total.Awarded.FY.2016, Total.Awarded.FY.2016 == '—', 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0)) %>%
mutate(dollar_2017 = replace(Total.Awarded.FY.2017, Total.Awarded.FY.2017 == '—', 0)) %>%
mutate(dollar_2016 = replace(Total.Awarded.FY.2016, Total.Awarded.FY.2016 == '—', 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dolla_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) #%>%
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018))
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct(State)
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct()
View(dollars_state)
#join the final data
j_data <-
right_join(disab_16_17, pop_dollar_data, by = "State")
View(j_data)
#join the final data
j_data <-
left_join(disab_16_17, pop_dollar_data, by = "State")
View(j_data)
View(pop_dollar_data)
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct()
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
filter(GEO.display.label != 'Geography') %>%
#normalizes input to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#join the disab data
disab_16_17<-
inner_join(disab_2016_state, disab_2017_state, by = "State")
#join the final data
j_data <-
inner_join(disab_16_17, pop_dollar_data, by = "State")
View(j_data)
View(disab_16_17)
library(magrittr)
library(dplyr)
library(lubridate)
library(tidyr)
df1 <- read.csv("AL_NY_Census.csv", stringsAsFactors = FALSE)  %>%
select(GEO.display.label, HC02_EST_VC01)
?replace
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State = "District of Columbia", 131917))
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
filter(GEO.display.label != 'Geography') %>%
#normalizes input to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State = "District of Columbia", 131917))
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State == "District of Columbia", 131917))
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
filter(GEO.display.label != 'Geography') %>%
#normalizes input to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#join the disab data
disab_16_17<-
inner_join(disab_2016_state, disab_2017_state, by = "State")
#join the final data
j_data <-
inner_join(disab_16_17, pop_dollar_data, by = "State")
View(j_data)
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State == "District of Columbia", 131917))
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
#normalizes Geography to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#join the disab data
disab_16_17<-
inner_join(disab_2016_state, disab_2017_state, by = "State")
#join the final data
j_data <-
inner_join(disab_16_17, pop_dollar_data, by = "State")
write.csv(j_data, 'cleaned_data.csv')
View(j_data)
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State == "District of Columbia", 131917))
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
#normalizes Geography to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
View(disab_2017_state)
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#join the disab data
disab_16_17<-
inner_join(disab_2016_state, disab_2017_state, by = "State")
#join the final data
j_data <-
inner_join(disab_16_17, pop_dollar_data, by = "State")
write.csv(j_data, 'cleaned_data.csv')
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
#inputs the cap appropriations table
dollars_state <-
read.csv("CAP_3_years.csv", stringsAsFactors = FALSE) %>%
#removes whitespace, non digits and converts to numeric
mutate(dollar_2018 = as.numeric(str_remove_all(trimws(Current.Awards.FY.2018), "\\D"))) %>%
mutate(dollar_2017 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2017), "\\D"))) %>%
mutate(dollar_2016 = as.numeric(str_remove_all(trimws(Total.Awarded.FY.2016), "\\D"))) %>%
#replaces the 'empty' values with 0
mutate(dollar_2018 = replace_na(dollar_2018, 0), dollar_2017 = replace_na(dollar_2017, 0), dollar_2016 = replace_na(dollar_2016, 0)) %>%
select(State, dollar_2018, dollar_2017, dollar_2016) %>%
#combines the conneticut and south carolina data into one line, then removes the duplicates
group_by(State) %>%
mutate(dollar_2018 = sum(dollar_2018), dollar_2017 = sum(dollar_2017), dollar_2016 = sum(dollar_2016)) %>%
distinct() %>%
#at the time of the source data's construction, DC had only recieved a portion of their funding. The following replaces that
#portion with the full amount they eventually recieved
mutate(dollar_2018 = replace(dollar_2018, State == "District of Columbia", 131917))
#inputs the census estimations for population by state, pulled directly from the census website
pop_state <-
read.csv("census_est_pop_2010_2018.csv", stringsAsFactors = FALSE) %>%
mutate(State = as.character(trimws(GEO.display.label))) %>%
select(State, respop72018, respop72017, respop72016) %>%
rename(pop_18 = respop72018, pop_17 = respop72017, pop_16 = respop72016)
pop_dollar_data <-
inner_join(dollars_state, pop_state, by = 'State')
#function to reduce repeat code
normalize_disab_data <- function(input_data){
input_data <-
input_data %>%
filter(GEO.display.label != 'Geography') %>%
#normalizes Geography to be character and removes whitespaces
mutate(State = as.character(trimws(GEO.display.label))) %>%
#normalizes input to be numeric
mutate(HC02_EST_VC01 = as.numeric(as.character(trimws(HC02_EST_VC01)))) %>%
select(State, HC02_EST_VC01)
return(input_data)
}
#inputs the 2017 estimated population with disabilities, gathered by the American Community Survey
disab_2017_state <-
read.csv("ACS_2017_DISAB_EST.csv") %>%
normalize_disab_data %>%
rename(disab_17 = HC02_EST_VC01)
#inputs the 2016 estimated population with disabilities, gathered by the American Community Survey
disab_2016_state<-
read.csv('ACS_2016_DISAB_EST.csv') %>%
normalize_disab_data %>%
rename(disab_16 = HC02_EST_VC01 )
#join the disab data
disab_16_17<-
inner_join(disab_2016_state, disab_2017_state, by = "State")
#join the final data
j_data <-
inner_join(disab_16_17, pop_dollar_data, by = "State")
write.csv(j_data, 'cleaned_data.csv')
library(dplyr)
library(magrittr)
library(tidyr)
library(stringr)
#sets WD to git repo folder, change to run on different computer
setwd("C:/Users/dark_/Documents/NDRN/CAP_Appropriations")
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dollar_)
input_data <-
read.csv('cleaned_data.csv')
View(input_data)
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dol_per_pop_18 = round(dollar_18 / pop_18, digits = 2))
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dol_per_pop_18 = round(dollar_2018 / pop_18, digits = 2))
View(input_data)
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dol_per_pop_18 = round(dollar_2018 / pop_18, digits = 5))
input_data %>% select(State, dollar_2018, dol_per_pop_18) %>% View()
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dol_per_pop_18 = round(dollar_2018 / pop_18, digits = 5)) %>%
mutate(pop_per_dol_18 = round(pop_18 / dollar_2018, digits = 5))
input_data %>% select(State, dollar_2018, dol_per_pop_18, pop_per_dol_18) %>% View()
input_data <-
read.csv('cleaned_data.csv') %>%
mutate(dol_per_pop_18 = round(dollar_2018 / pop_18, digits = 5)) %>%
mutate(pop_per_dol_18 = round(pop_18 / dollar_2018, digits = 5)) %>%
mutate(normalized_dol = round(dollar_2018 / 131917, digits = 2))
input_data %>% select(State, dollar_2018,normalized_dol, dol_per_pop_18, pop_per_dol_18) %>% View()
